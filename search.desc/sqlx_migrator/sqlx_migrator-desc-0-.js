searchState.loadedDescShard("sqlx_migrator", 0, "Library to create sqlx migration using rust code instead …\nMacro for implementing the <code>migration</code> macro for the <code>Any</code>.\nModule for creating and running cli with help of migrator\nModule for library error\nModule defining migration trait To create own implement …\nMacro for implementing the <code>Migration</code> trait for the …\nMigrator module\nMacro for implementing the <code>migration</code> macro for the <code>MySql</code>.\nOperation module To create own operation implement trait …\nMacro for implementing the <code>migration</code> macro for the <code>Postgres</code>…\nMacro for implementing the <code>migration</code> macro for the <code>Sqlite</code>.\nMacro for vector of <code>Box</code>\nMigration command for performing rust based sqlx migrations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse <code>MigrationCommand</code> and run migration command line …\nRun migration command line interface\nError when provided app name doesn’t exists\nError when applied migrations exists\nError when migration plan has applied replaces migrations …\nError type created from error raised by box error\nError when count of migrations is big than total number of …\nError enum to store different types of error\nError for failed to create migrations plan\nError for irreversible operation\nError when provided migration name doesn’t exists for app\nError when one migration is replaced by multiple times …\nError generated when no migration are added\nError when passed prefix is not alpha numeric\nParent is not applied\nError for pending migration present\nError type created from error raised by sqlx\nError type created from error raised by std input output\nError when unsupported database is used as any database\nError generated if virtual migration is present while …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nActual length of migration\nName of app\nName of app\nCount passed in option\nName of migration\nMigration struct created from sql table. Struct contains 4 …\nTrait for migration\nMigration app name. Can be name of folder or library where …\nReturn migration applied time\nReturns the argument unchanged.\nReturn id value present on database\nCalls <code>U::from(self)</code>.\nWhether migration is atomic or not. By default it is …\nWhether migration is virtual or not. By default migration …\nMigration name. Can be file name without extension\nOperation performed for migration (create, drop, etc.). …\nParents of migration (migrations that should be applied …\nReplace certain migrations. If any one of listed migration …\nRun before(for applying)/after(for reverting) certain …\nTrait which is implemented for database for performing …\nInfo trait which implements some of database agnostic …\nMigrate trait which migrate a database according to …\nMigrator struct which store migrations graph and …\nStruct which determine type of plan to use\nAdd single migration to migrator object\nAdd migration to migration db table\nAdd vector of migrations to Migrator object\nCreate new plan for apply all\nCreate new plan for apply count\nCreate new plan for apply for provided app and migration …\nDelete migration from migration db table\nDrop migration table if migration table exists\nEnsure migration table is created before running …\nList all applied migrations from database as struct\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate migration plan according to plan. Returns a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLock database while doing migrations so no two migrations …\nReturn migrations\nReturn mutable reference of migrations\nCreate new migrator with provided state\nCreate new plan for revert all\nCreate new plan for revert count\nCreate new plan for revert for provided app and migration …\nRun provided plan migrations\nReturn state used in migrator\nGet name of table which is used for storing migrations …\nUnlock locked database\nUse prefix for migrator table name only ascii alpha …\nTrait for operation\nDown command to be executed during migration rollback. If …\nWhether up operation is destructible or not. If operation …\nUp command to be executed during migration apply")