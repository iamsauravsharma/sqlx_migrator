var searchIndex = JSON.parse('{\
"sqlx_migrator":{"doc":"Library to create sqlx migration using rust code instead …","t":[0,0,0,0,0,0,0,2,5,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,16,8,11,11,10,10,10,16,8,11,10,11,11,11,11,10,10,10,11,11,10,10,10,11,11,11,16,8,10,10,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["cli","error","migration","migrator","operation","postgres","sqlite","sqlx","run","Error","FailedToCreateMigrationPlan","SqlxError","borrow","borrow_mut","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","vzip","0","Database","Migration","eq","hash","name","operations","parents","Database","Migrator","add_migration","add_migration_to_db_table","add_migrations","apply_all","apply_all_plan","apply_migration","delete_migration_from_db_table","ensure_migration_table_exists","fetch_applied_migration_from_db","generate_full_migration_plan","list_applied_migrations","migrations","migrations_mut","pool","revert_all","revert_all_plan","revert_migration","Database","Operation","down","up","migrator","Migrator","add_migration_to_db_table","borrow","borrow_mut","delete_migration_from_db_table","ensure_migration_table_exists","fetch_applied_migration_from_db","from","into","migrations","migrations_mut","new","pool","try_from","try_into","type_id","vzip","migrator","Migrator","add_migration_to_db_table","borrow","borrow_mut","delete_migration_from_db_table","ensure_migration_table_exists","fetch_applied_migration_from_db","from","into","migrations","migrations_mut","new","pool","try_from","try_into","type_id","vzip"],"q":["sqlx_migrator","","","","","","","","sqlx_migrator::cli","sqlx_migrator::error","","","","","","","","","","","","","","","","sqlx_migrator::error::Error","sqlx_migrator::migration","","","","","","","sqlx_migrator::migrator","","","","","","","","","","","","","","","","","","","sqlx_migrator::operation","","","","sqlx_migrator::postgres","sqlx_migrator::postgres::migrator","","","","","","","","","","","","","","","","","sqlx_migrator::sqlite","sqlx_migrator::sqlite::migrator","","","","","","","","","","","","","","","",""],"d":["Module for creating and running cli with help of migrator","Module for library error","Module defining migration trait","migrator module","Operation module","Postgres module","sqlite module","","Run cli by parsing args with help of migrator","Error enum to store different types of error","Error for failed to create migrations plan from cyclic …","Error type created from error raised by sqlx","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Type of database to be used","Trait for migration","","","Migration name","Operation performed for migration (create, drop, etc.)","Parents of migration (migrations that should be applied …","Database type","Migrator trait","Add single migration to migrator object","Add migration to migration table","Add vector of migrations to Migrator object","Apply missing migration plan","Generate apply all migration plan. Returns a vector of …","Apply certain migration to database and add it to applied …","Delete migration from table","Ensure migration table is created before running …","List all applied migrations from database in string format …","Generate full migration plan for all migrations. Returns a …","List all applied migrations. Returns a vector of migration","Return migrations","Return mutable reference of migrations","Return pool of database","Revert all applied migration from database","Create revert all plan for all migrations. Returns a …","Revert migration","Database type to be used","Trait for operation","Down command to be executed during migration rollback","Up command to be executed during migration apply","Postgres migrator module","Migrator struct which store migrations graph and …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Create new migrator from pool","","","","","","Sqlite migrator module","Migrator struct which store migrations graph and …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Create new migrator from pool","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,0,3,3,3,3,3,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,0,5,5,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],"f":[null,null,null,null,null,null,null,null,[[["box",3,[["migrator",8]]]],["future",8]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["error",4],["formatter",3]],["result",6]],[[["error",4],["formatter",3]],["result",6]],[[]],[[["error",4]],["error",4]],[[]],[[["error",4]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,[[["migration",8],["migration",8]],["bool",0]],[[["migration",8],["",0]]],[[["",0]],["str",0]],[[["",0]],["vec",3,[["box",3,[["operation",8]]]]]],[[["",0]],["vec",3,[["box",3,[["migration",8]]]]]],null,null,[[["",0],["box",3,[["migration",8]]]]],[[["",0],["str",0],["transaction",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["vec",3,[["box",3,[["migration",8]]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["box",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["str",0],["transaction",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["result",4,[["vec",3,[["box",3]]],["error",4]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["hashset",3]],[[["",0]],["hashset",3]],[[["",0]],["pool",3]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["box",3]],["pin",3,[["box",3,[["future",8]]]]]],null,null,[[["",0],["transaction",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["transaction",3]],["pin",3,[["box",3,[["future",8]]]]]],null,null,[[["migrator",3],["str",0],["transaction",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["migrator",3],["str",0],["transaction",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["migrator",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["migrator",3]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[]],[[["migrator",3]],["hashset",3]],[[["migrator",3]],["hashset",3]],[[["pool",3]],["migrator",3]],[[["migrator",3]],["pool",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["migrator",3],["str",0],["transaction",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["migrator",3],["str",0],["transaction",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["migrator",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["migrator",3]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[]],[[["migrator",3]],["hashset",3]],[[["migrator",3]],["hashset",3]],[[["pool",3]],["migrator",3]],[[["migrator",3]],["pool",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[4,"Error"],[13,"SqlxError"],[8,"Migration"],[8,"Migrator"],[8,"Operation"],[3,"Migrator"],[3,"Migrator"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
