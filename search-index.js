var searchIndex = JSON.parse('{\
"sqlx_migrator":{"doc":"Library to create sqlx migration using rust code instead …","t":[0,0,0,0,0,0,0,2,5,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,16,8,10,11,11,11,10,11,11,11,11,13,16,13,8,4,13,3,11,10,11,11,11,11,11,11,11,10,10,11,10,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,16,8,11,10,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["cli","error","migration","migrator","operation","postgres","sqlite","sqlx","run","Error","FailedToCreateMigrationPlan","IrreversibleOperation","PendingMigration","SqlxError","borrow","borrow_mut","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","vzip","0","Database","Migration","app","eq","hash","is_atomic","name","operations","parents","replaces","run_before","Apply","Database","Full","Migrator","PlanType","Revert","SqlMigratorMigration","add_migration","add_migration_to_db_table","add_migrations","apply_all","apply_migration","borrow","borrow","borrow_mut","borrow_mut","delete_migration_from_db_table","ensure_migration_table_exists","eq","fetch_applied_migration_from_db","fmt","from","from","from_row","generate_migration_plan","into","into","list_applied_migrations","migrations","migrations_mut","pool","revert_all","revert_migration","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Database","Operation","down","up","migrator","Migrator","add_migration_to_db_table","borrow","borrow_mut","delete_migration_from_db_table","ensure_migration_table_exists","fetch_applied_migration_from_db","from","into","migrations","migrations_mut","new","pool","try_from","try_into","type_id","vzip","migrator","Migrator","add_migration_to_db_table","borrow","borrow_mut","delete_migration_from_db_table","ensure_migration_table_exists","fetch_applied_migration_from_db","from","into","migrations","migrations_mut","new","pool","try_from","try_into","type_id","vzip"],"q":["sqlx_migrator","","","","","","","","sqlx_migrator::cli","sqlx_migrator::error","","","","","","","","","","","","","","","","","","sqlx_migrator::error::Error","sqlx_migrator::migration","","","","","","","","","","","sqlx_migrator::migrator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sqlx_migrator::operation","","","","sqlx_migrator::postgres","sqlx_migrator::postgres::migrator","","","","","","","","","","","","","","","","","sqlx_migrator::sqlite","sqlx_migrator::sqlite::migrator","","","","","","","","","","","","","","","",""],"d":["Module for creating and running cli with help of migrator","Module for library error","Module defining migration trait","migrator module","Operation module","Postgres module postgres module implements migrator trait …","sqlite module","","Run cli by parsing args with help of migrator","Error enum to store different types of error","Error for failed to create migrations plan","Error for irreversible operation","Error for pending migration present","Error type created from error raised by sqlx","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Type of database to be used","Trait for migration","Migration app name. Can be name of folder or library where …","","","Whether migration is atomic or not. By default it is true","Migration name. Can be file name without extension","Operation performed for migration (create, drop, etc.)","Parents of migration (migrations that should be applied …","Replace certain migrations. If any one of listed migration …","Run before certain migration. This can be helpful in …","Apply plan. Plan containing migrations which can be applied","Database type","Full plan. Plan containing all migrations according to …","Migrator trait","Type of plan used to generate migrations","Revert plan. Plan containing migrations which can be …","Migration struct created from sql table. struct contains 4 …","Add single migration to migrator object","Add migration to migration table","Add vector of migrations to Migrator object","Apply missing migration","Apply given migration and add it to applied migration table","","","","","Delete migration from table","Ensure migration table is created before running …","","List all applied migrations from database in string format …","","Returns the argument unchanged.","Returns the argument unchanged.","","Generate migration plan for according to plan type. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","List all applied migrations. Returns a vector of migration","Return migrations","Return mutable reference of migrations","Return pool of database","Revert all applied migration from database","Revert provided migration and remove migration from table","","","","","","","","","Database type to be used","Trait for operation","Down command to be executed during migration rollback. If …","Up command to be executed during migration apply","Postgres migrator module","Migrator struct which store migrations graph and …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Create new migrator from pool","","","","","","Sqlite migrator module","Migrator struct which store migrations graph and …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Create new migrator from pool","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,26,14,0,14,14,14,14,14,14,14,14,14,20,1,20,0,0,20,0,1,1,1,1,1,19,20,19,20,1,1,19,1,20,19,20,19,1,19,20,1,1,1,1,1,1,19,20,19,20,19,20,19,20,16,0,16,16,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25],"f":[0,0,0,0,0,0,0,0,[[[2,[1]]],3],0,0,0,0,0,[[]],[[]],[[4,5],6],[[4,5],6],[[]],[7,4],[[]],[4,[[9,[8]]]],[[],10],[[],11],[[],11],[[],12],[[]],0,0,0,[[],13],[[14,14],15],[14],[[],15],[[],13],[[],[[17,[[2,[16]]]]]],[[],[[17,[[2,[14]]]]]],[[],[[17,[[2,[14]]]]]],[[],[[17,[[2,[14]]]]]],0,0,0,0,0,0,0,[[[2,[14]]]],[2,[[18,[[2,[3]]]]]],[[[17,[[2,[14]]]]]],[[],[[18,[[2,[3]]]]]],[2,[[18,[[2,[3]]]]]],[[]],[[]],[[]],[[]],[2,[[18,[[2,[3]]]]]],[[],[[18,[[2,[3]]]]]],[[19,2],15],[[],[[18,[[2,[3]]]]]],[[20,5],6],[[]],[[]],[[],[[21,[19]]]],[20,[[18,[[2,[3]]]]]],[[]],[[]],[[],[[18,[[2,[3]]]]]],[[],22],[[],22],[[],23],[[],[[18,[[2,[3]]]]]],[2,[[18,[[2,[3]]]]]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[]],[[]],0,0,[[],[[18,[[2,[3]]]]]],[[],[[18,[[2,[3]]]]]],0,0,[[24,2],[[18,[[2,[3]]]]]],[[]],[[]],[[24,2],[[18,[[2,[3]]]]]],[24,[[18,[[2,[3]]]]]],[24,[[18,[[2,[3]]]]]],[[]],[[]],[24,22],[24,22],[23,24],[24,23],[[],11],[[],11],[[],12],[[]],0,0,[[25,2],[[18,[[2,[3]]]]]],[[]],[[]],[[25,2],[[18,[[2,[3]]]]]],[25,[[18,[[2,[3]]]]]],[25,[[18,[[2,[3]]]]]],[[]],[[]],[25,22],[25,22],[23,25],[25,23],[[],11],[[],11],[[],12],[[]]],"p":[[8,"Migrator"],[3,"Box"],[8,"Future"],[4,"Error"],[3,"Formatter"],[6,"Result"],[4,"Error"],[8,"Error"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"str"],[8,"Migration"],[15,"bool"],[8,"Operation"],[3,"Vec"],[3,"Pin"],[3,"SqlMigratorMigration"],[4,"PlanType"],[6,"Result"],[3,"HashSet"],[3,"Pool"],[3,"Migrator"],[3,"Migrator"],[13,"SqlxError"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
